# This file stores all settings the pipeline uses.
# You can adjust this settings to get better / worse
# performance, in exchange of rendering quality.

[General]

    # Whether to prevent multiple running instances of the pipeline. When multiple
    # instances of the pipeline are running at the same time, the gpu driver
    # might crash, so in that case you might want to set it to True.
    preventMultipleInstances = True

    # Sets the 3D resolution multiplier. Usually you want to set this to 1.0, but
    # for fillrate-bound gpus (mostly mobile gpus), you can lower this, 0.7 means
    # 70% 3D Resolution.
    # You can also increase this, e.g. to render 4K on Full HD monitors, but
    # its really performance intensive!
    resolution3D = 1.0

    # Clearing the Render- and TransformState cache every once in a while seems
    # to help with performance, this interval controls the duration between the
    # cache clears
    stateCacheClearInterval = 0.2

[Rendering]
    
    # Wheter to first run a depth only pass, and then the main scene pass. This
    # helps reducing overdraw, but only makes sense for more complex scenes.
    enableEarlyZ = False

[Antialiasing]

    # 'SMAA', 'FXAA' are the only ones available yet (working well)
    # To disable anti-aliasing use 'None' (not recommended)
    antialiasingTechnique = "SMAA"

    # SMAA Quality, either Low, Medium, High, Ultra
    # Obviously only has effect when SMAA is selected, ultra can be used most
    # of the time.
    smaaQuality = "Ultra"

    # When using SMAA T2 (default), this determines the size of the subpixel
    # shifts. In general, higher values mean smoother edges, but also a bit 
    # blurred textures.
    jitterAmount = 0.25

[Lighting]

    # Size of a patch in pixels for the light culling
    computePatchSizeX = 64
    computePatchSizeY = 64

    # This is the cubemap used for the ambient lighting and specular reflections.
    # Use a "#" as placeholder for the different sides. 
    defaultReflectionCubemap = "Data/Cubemaps/Default-1-Prefiltered/#_#.png"

    # This specifies which color LUT to use. The LUT should be placed in Data/ColorLUT.
    colorLookupTable = "BrightenAndContrast2.png"

    # This factor reduces aliasing at the edges of high-reflective Objects. The 
    # higher this factor is, the more blurry the edges might look, however the aliasing
    # is reduced more. Set to 0.0 to disable this feature (not recommended).
    cubemapAntialiasingFactor = 5.0

    # This feature enables dynamic brightness, to simulate the human eye. It scales
    # the scene exposure based on the current brightness, to always have the same
    # average exposure.
    useAdaptiveBrightness = False

    # This sets the target exposure for the adaptive brightness
    targetExposure = 0.5

    # This controls how fast the exposure gets corrected
    brightnessAdaptionSpeed = 1.0

    # This controls the global ambient factor, including occlusion and global 
    # illumination. If you set this to 0, you should disable occlusion and gi, as
    # they have no effect then 
    globalAmbientFactor = 1.0

    # Whether to use color correction at all, this includes the Color LUT, Chromatic
    # aberration and film grain
    useColorCorrection = True

    # Whether to enable alpha testing for shadows. This costs a bit of performance,
    # but for some objects like trees it is important to have this enabled
    enableAlphaTestedShadows = False

    # When this is set to true, Diffuse Antialiasing will be used, as described in
    # http://advances.realtimerendering.com/s2012/Ubisoft/Rock-Solid%20Shading.pdf. Basically
    # this improves the lighting for objects with normal maps. If you don't use
    # normal mapping, this won't have any effect!
    useDiffuseAntialiasing = True


[Scattering]

    # Enable the use of an atmospheric scattering model. 
    enableScattering = True

    # Size of the generated cubemap for the scattering, used for the ambient term
    # and reflections
    scatteringCubemapSize = 128


[SSLR]

    # Whether to enable Screen Space Local Reflections
    # Note: Currently takes up quite a lot of performance
    enableSSLR = False

    # Whether to compute sslr at half resolution and upscale it afterwards.
    sslrUseHalfRes = False

    # Number of sslr search steps
    sslrNumSteps = 64

    # SSLR radius in screen space, 0.5 means 50% of screen width
    sslrScreenRadius = 0.3


[Occlusion]

    # 'None', 'SAO' and 'HBAO' available
    # Todo: Write explanation of all techniques
    occlusionTechnique = "HBAO"

    # Radius of the occlusion in pixels, higher pixels mean better results but also
    # worse performance.
    occlusionRadius = 10.0

    # Strength of the occlusion. 1.0 is default
    occlusionStrength = 1.0
 
    # Occlusion samples. More samples = better quality but less
    # performance.
    occlusionSampleCount = 4

    # When enabling this setting, the occlusion sample pattern is switched every
    # frame and combined with the last frame. This enables having a better occlusion 
    # result with the same amount of samples. However, this can lead to flickering 
    # at certain scenes, so you have to test if this works for you.
    # Note: This works best when temporal aliasing ("SMAA") is enabled!
    useTemporalOcclusion = True

    # Whether to use low quality occlusion blur, this can save up a lot of performance
    useLowQualityBlur = False

    # Whether to randomize the occlusion per pixel. This costs some performance due
    # to how the texture cache works, but the result looks way better.
    useOcclusionNoise = True

[Shadows]

    # Whether to render shadows. This does not prevent shadowmaps from being
    # generated
    renderShadows = True

    # The size of the global shadow atlas. If you're running out of vram, try
    # reducing this. Don't forget to adjust your light settings so that they
    # use smaller shadow map sizes.
    shadowAtlasSize = 8192

    # Adding a border around each shadow cascade avoids filtering issues. The 
    # border is specified in percentage of the cascade size.
    shadowCascadeBorderPercentage = 0.1

    # Limit the maximum shadow updates per frame. Higher values mean worse
    # performance, but more responsible shadows. Has to be between 1 and 16
    maxShadowUpdatesPerFrame = 7

    # Size of the shadow blur kernels to use. Higher values mean worse
    # performance but smoother shadows. From 4 .. 64 
    # Note: When having many shadowed lights, this can be the difference between
    # 30 and 60 fps! Adjust this parameter carefully.
    # If usePCSS is enabled, this has *no* effect on DirectionalLights!
    numPCFSamples = 32

    # If this setting is enabled, PCSS is used for directional lights. It offers
    # a varying penumbra, aiming for better realism. However, this technique can
    # be very expensive, so in some cases you might want to disable it
    usePCSS = True

    # For directional lights, PCSS can be used. Usually the search sample count can
    # be lower than the actual pcss filter sample count. From 4 .. 64
    numPCSSSearchSamples = 32
    numPCSSFilterSamples = 32

    # Whether to use hardware shadow filtering. Highly recommended for smooth
    # shadows, seems not to works on all ati cards tho?
    # Important notice: This seems to speedup shadow rendering by a lot. Try to
    # enable it if possible 
    useHardwarePCF = True

    # Whether to always update each shadow map, ignoring if it actually has to
    # get updated, or not. This is mainly for debugging / stress-testing.
    alwaysUpdateAllShadows = True

    # The sample radius of the pcss filter. Should be usually 1/100 of a meter,
    # so if 1 meter = 1 panda unit, this value should be 0.01
    pcssSampleRadius = 0.038

[Transparency]

    # Whether to enable transparency, you should only enable this if your scene
    # actually contains transparent objects
    useTransparency = False

    # Sets the maximum amount of layers of transparency. Affects performance quite
    # a bit. When there are more layers than specified, artifacts will occur.
    maxTransparencyLayers = 5

    # Sets the maximum distance for rendering transparent objects, after that range
    # they wont get rendered. This setting helps to avoid sorting artifacts, and should
    # be as low as possible
    maxTransparencyRange = 200.0

    # Transparent pixels are shaded in batches with a size of batchSize * batchSize.
    # There can be up to 40 batches at one time. The bigger the batch size is, the
    # more transparent pixels can be rendered, however, this affects performance, too.
    # With a batch size of 300, there can be up to 300*300*40 = 3.600.000 transparent
    # pixels at one time. If there are more pixels than that amount, they won't get
    # shaded and appear black.
    transparencyBatchSize = 300

[Motion Blur]

    # Whether to use motion blur or not. 
    enableMotionBlur = True

    # The number of motion blur samples. Values starting at 4 look ok.
    # Too high values (> 64) may greatly impact your performance.
    motionBlurSamples = 32

    # Motion blur strength. Values greater than 2 aren't recommended.
    motionBlurFactor = 0.5

    # Motion blur dilate radius
    motionBlurDilatePixels = 10.0

[Global Illumination]

    # The GI uses a voxel representation of the scene, built using forward shading,
    # and simulates light propagation. For outdoor scenes, the effect is almost
    # invisible, however, it its quite crucial for interior scenes.
    enableGlobalIllumination = True

    # Size of the global illumination grid in world space units. The grid is actually
    # twice the size, so if a size of 100 is specified, the grid will have a size 
    # of 200 * 200 * 200
    giVoxelGridSize = 110.0

    # Select between "Low", "Medium", "High", the GI will adjust the settings automatically.
    # Most times "High" is appropriate, but on low end gpu's you can use the "Medium" setting
    # to have GI at a reasonable performance. "Low" should only be used in extreme cases!
    # WARNING: Do *not* use "Ultra" except if you want to burn your gpu!
    giQualityLevel = "High"

[Clouds]

    # Experimental clouds, wip!
    enableClouds = False

[Bloom]

    # Bloom takes the bright areas of the rendered image and blurs them, then
    # adds them back to the image
    enableBloom = True

    # TODO: Add settings for bloom

[Depth of Field]
        
    # Wheter to use depth of field blur
    # EXPERIMENTAL!
    enableDOF = False

[Debugging]

    # Shows a small toolkit to debug material properties
    # and various other properties of the pipeline
    # WARNING: This makes rendering slower by 4-5ms
    displayOnscreenDebugger = True

    # Shows a yellow text, displaying how many lights got rendered this frame,
    # including shadow updates
    displayDebugStats = True

    # Wheter to enable the performance overlay (can be shown with TAB), which
    # analyzes the frame time and displays the most expensive passes. 
    # Requires the onscreen debugger to be enabled (displayOnscreenDebugger).
    # The performance overlay slows down the performance by about 2ms
    displayPerformanceOverlay = False

    # You can configure the messages printed by the pipeline here. The statuses
    # are (in order): debug, warning, error, fatal. If you set this setting to 
    # warning for example, all debug messages are hidden.
    pipelineOutputLevel = "debug"

    # Whether to a attach a color texture to buffers which don't really produce
    # a useful color texture. This is mainly helpful for debugging
    useDebugAttachments = True
