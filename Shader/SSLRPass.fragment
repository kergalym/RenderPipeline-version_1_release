#version 400


// #pragma optionNV (unroll all)

#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/PoissonDisk.include"

in vec2 texcoord;

uniform sampler2D colorTex;
uniform sampler2D depthTex;
uniform sampler2D normalTex;
uniform sampler2D skyboxMask;

uniform vec3 cameraPosition;

// uniform samplerCube defaultCubemap;

uniform mat4 currentMVP;



out vec4 result;



vec4 traceRayTo(vec3 endPosWorld, int steps, float depth, vec3 reflectionVector) {

    // Convert target world position to screen space
    vec4 transformedTarget = currentMVP * vec4(endPosWorld, 1);
    transformedTarget.xyz = (transformedTarget.xyz / transformedTarget.w) * 0.5 + 0.5; 

    if (transformedTarget.z < 0.0) return vec4(0,0,0,0);

    vec3 currentCoord = vec3(texcoord, depth);

    // Normalize the vector to a certain length
    vec3 traceVector = normalize(transformedTarget.xyz - currentCoord) * SSLR_SCREEN_RADIUS;
    vec3 coordStep = traceVector / float(steps);
    vec3 matchedPos = vec3(-1);

    float foundDiff = 1.0;
    float maxDepthDiff = 0.0009;


    // Trace Ray
    for (int i = 0; i < steps; i++) {
        currentCoord += coordStep;

        if (any(greaterThan(currentCoord.xy, vec2(1.0))) || any(lessThan(currentCoord.xy, vec2(0.0)))) {
            break;
        }

        float depthDiff = currentCoord.z - textureLod(depthTex, currentCoord.xy, 0).x;

        if ( depthDiff > 0.0 && depthDiff < maxDepthDiff ) {
            matchedPos = currentCoord;
            foundDiff = depthDiff;
            break;
        }

    }

    // Fade out the result at the screen edges
    float fade = 1.0;
    float fadeArea = 0.05;
    fade *= saturate(matchedPos.x / fadeArea);
    fade *= saturate( (1.0 - matchedPos.x) / fadeArea);
    fade *= saturate(matchedPos.y / fadeArea);
    fade *= saturate( (1.0 - matchedPos.y) / fadeArea);

    // Fade out the result based on the distance to its original pixel
    fade *= 1.0 - saturate(distance(texcoord, matchedPos.xy) / SSLR_SCREEN_RADIUS);

    float skymask = texture(skyboxMask, matchedPos.xy).x;

    // If our match is outside of the screen, too close to the current pixel or the skybox,
    // discard the result.
    if (matchedPos.x < 0.0 || matchedPos.y < 0.0 || distance(matchedPos.xy, texcoord) < 0.01 || skymask > 0.5) {
        return vec4(0);
    } 

    return texture(colorTex, matchedPos.xy) * fade;
}

void main() {

    ivec2 coord = ivec2(gl_FragCoord.xy);

    #if defined(SSLR_HALF_RES)
        coord *= 2;
    #endif

    #if !defined(DEBUG_DISABLE_SSLR)

    // Fetch pixel data
    float pixelDepth = texelFetch(depthTex, coord, 0).x;
    vec3 pixelNormal = unpackGBufferNormal(texelFetch(normalTex, coord, 0).xyz);
    // vec3 pixelPos = texelFetch(positionTex, coord, 0).xyz;

    vec3 pixelPos = calculateSurfacePos(pixelDepth, texcoord);

    vec4 pixelColor = texelFetch(colorTex, coord, 0);

    // The lighting pass outputs the reflection factor in the alpha component
    float sslrFactor = pixelColor.w;


    // Ignore pixels with low reflection factor, including the skybox
    if (sslrFactor < 0.05) {
        result = vec4(0);
        return;
    }

    // Compute reflection vector
    vec3 viewVector = normalize(pixelPos - cameraPosition);
    vec3 reflectionVector = reflect(viewVector, pixelNormal);

    // Convert reflection vector to world space
    vec3 reflectionTargetWorld = pixelPos + reflectionVector * 100.0;

    // Raytrace along the reflection vector
    vec4 traceResult = traceRayTo(reflectionTargetWorld, SSLR_STEPS, pixelDepth, reflectionVector);
    
    // vec3 fallbackResult = texture(defaultCubemap, reflectionVector).xyz;

    // traceResult.xyz = mix(fallbackResult, traceResult.xyz, traceResult.w);

    // Take the sslr factor into account
    traceResult *= sslrFactor;


    #if defined(DEBUG_VISUALIZATION_ACTIVE) && !defined(DEBUG_RM_SSLR)
        traceResult = vec4(0);
    #endif

    result = traceResult;

    #else

    result = vec4(0);

    #endif

}
