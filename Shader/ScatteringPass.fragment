#version 400

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ApplyScattering.include"

in vec2 texcoord;
out vec4 result;
out vec4 resultReflected;

uniform sampler3D inscatterSampler;
uniform sampler2D irradianceSampler;
uniform sampler2D transmittanceSampler;
uniform ScatteringOptions scatteringOptions;

uniform sampler2D basecolorTex;
uniform sampler2D skyboxMask;
uniform sampler2D depthTex;
uniform sampler2D cloudsTex;

uniform vec3 cameraPosition;

void main() {
    ivec2 coord = ivec2(gl_FragCoord.xy);

    float pixelDepth = texelFetch(depthTex, coord, 0).x;
    vec3 pixelPosition = calculateSurfacePos(pixelDepth, texcoord);

    #if defined(CLOUDS_ENABLED)
        vec4 cloudColor = texture(cloudsTex, texcoord);
    #else
        vec4 cloudColor = texture(basecolorTex, texcoord);
    #endif

    vec3 pixelPositionEarth = pixelPosition;

    #if defined(DEBUG_DISABLE_SCATTERING)
        result = vec4(cloudColor.xyz, 1);
        resultReflected = vec4(1);
        return;
    #endif

    vec3 viewDir = normalize(pixelPositionEarth - cameraPosition);


    // There should be a more elegant way, but for now it works. I don't want to
    // waste a gbuffer flag for marking the skybox.r
    bool isSkybox = texelFetch(skyboxMask, coord, 0).x > 0.5;

    if (isSkybox) {
        pixelPositionEarth *= 1e10;
    }

    // Compute scattering
    vec3 attenuation = vec3(0);
    float irradianceFactor = 0.0;
    vec3 scatteringResult = scatteringComputeInscatteredLight(
        scatteringOptions,
        pixelPositionEarth, 
        cameraPosition,
        viewDir, 
        inscatterSampler,
        cloudColor,
        isSkybox,
        attenuation, 
        irradianceFactor);
    // vec3 scatteringResult = vec3(1);

    // Compute attenuation / reflected light
    // vec3 scatteringSpacePosition = scatteringTransformPosition(scatteringOptions, pixelPosition * vec3(0));

    // float surfacePosHeight = length(scatteringSpacePosition);
    // float musSurfacePos = dot(scatteringSpacePosition, scatteringOptions.sunVector) / surfacePosHeight;
    // vec3 irradianceSurface = irradiance(scatteringOptions, irradianceSampler, surfacePosHeight, musSurfacePos) ;
    // vec3 attenuationSunLight = transmittance(scatteringOptions, transmittanceSampler, surfacePosHeight, musSurfacePos);
    // vec3 reflectedLight = attenuation * attenuationSunLight;
    // resultReflected = vec4(max(vec3(0.0), reflectedLight), 1.0);
    resultReflected = vec4(1);

    scatteringResult *= 4.5;

    if (!isSkybox) {
        scatteringResult *= 1.2;
    } else {
        scatteringResult *= 0.1;
        scatteringResult = pow(scatteringResult, vec3(0.5)) * 2.1;
        
    }


    #if defined(DEBUG_VISUALIZATION_ACTIVE) && !defined(DEBUG_RM_SCATTERING)
        scatteringResult = vec3(0);
    #endif

    result = vec4(scatteringResult, 1.0);
}

