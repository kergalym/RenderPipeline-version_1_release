#pragma once

#pragma optionNV (unroll all)

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Structures/Material.struct"
#pragma include "Includes/PoissonDisk.include"
#pragma include "Includes/Structures/GIData.struct"

uniform GIData giData;
uniform float giReadyState;
uniform sampler3D giVoxelDataPosX;
uniform sampler3D giVoxelDataNegX;
uniform sampler3D giVoxelDataPosY;
uniform sampler3D giVoxelDataNegY;
uniform sampler3D giVoxelDataPosZ;
uniform sampler3D giVoxelDataNegZ;
uniform sampler3D voxelSolidTex;

struct Voxel {
    vec3 posX;
    vec3 negX;
    vec3 posY;
    vec3 negY;
    vec3 posZ;
    vec3 negZ;
    float solid;
};


uniform int frameIndex;


Voxel fetchVoxel(vec3 coord) {
    // textureLod() seems to be the fastest, even faster than texelFetch() and texture()
    Voxel v;

    v.posX = textureLod(giVoxelDataPosX, coord, 0).xyz;
    v.negX = textureLod(giVoxelDataNegX, coord, 0).xyz;
    v.posY = textureLod(giVoxelDataPosY, coord, 0).xyz;
    v.negY = textureLod(giVoxelDataNegY, coord, 0).xyz;
    v.posZ = textureLod(giVoxelDataPosZ, coord, 0).xyz;
    v.negZ = textureLod(giVoxelDataNegZ, coord, 0).xyz;
    v.solid = textureLod(voxelSolidTex, coord, 0).x;
    return v;
}



vec4 getVoxelInfluence(vec3 coord, vec3 normal) {
    Voxel v = fetchVoxel(coord);
    vec4 resultSum;
    float amb = 0.2;
    float fact = 1.0;
    resultSum.xyz += saturate(amb + fact*saturate(-normal.x)) * v.posX;
    resultSum.xyz += saturate(amb + fact*saturate(normal.x)) * v.negX;
    resultSum.xyz += saturate(amb + fact*saturate(-normal.y)) * v.posY;
    resultSum.xyz += saturate(amb + fact*saturate(normal.y)) * v.negY;
    resultSum.xyz += saturate(amb + fact*saturate(-normal.z)) * v.posZ;
    resultSum.xyz += saturate(amb + fact*saturate(normal.z)) * v.negZ;

    // resultSum.w = (1.05 - v.solid);
    // resultSum.xyz *= resultSum.w;
    
    return resultSum;
}

float getVoxelSolidness(vec3 coord) {
    return textureLod(voxelSolidTex, coord, 0).x;
}


vec4 computeGlobalIllumination(vec3 pos, vec3 normal, vec3 viewVector, out vec4 specularColor) {

    vec4 offColor = vec4(vec3(1.5), 1.0);

    // In case the gi is still building
    if (giReadyState < 0.5) {
        return offColor;
    }

    // Compute grid variables
    vec3 gridStart = giData.position - giData.size*0.9;
    vec3 gridEnd = giData.position + giData.size*0.9;
    float voxelSize = (2.0 * giData.size) / giData.resolution;

    // Check if the pixel is in the grid
    bool isInGrid = all(greaterThan(pos, gridStart)) && 
                    all(lessThan(pos, gridEnd));

    specularColor = vec4(0);

    // If not in gi range, ignore this pixel
    // TODO: Check if early out is actually faster
    if (!isInGrid) return offColor;



    // Bias position a bit, so self shadowing gets less strong
    vec3 biasedPosition = pos + normal * voxelSize * 1.0;
    vec3 biasedReflPosition = pos + normal * voxelSize * 1.1;

    // Compute coordinate in voxel space
    vec3 localCoord = (biasedPosition-giData.position + giData.size) / (2 * giData.size);
    vec3 localReflCoord = (biasedReflPosition-giData.position + giData.size) / (2 * giData.size);
    vec3 localCoordOffs = mod(localCoord+ 0.5/giData.resolution, 1.0 / giData.resolution) * giData.resolution;


    // Compute fade factor
    float fade = 1;
    float fadeArea = 0.1;
    fade *= saturate(localCoord.x / fadeArea);
    fade *= saturate( (1.0 - localCoord.x) / fadeArea);
    fade *= saturate(localCoord.y / fadeArea);
    fade *= saturate( (1.0 - localCoord.y) / fadeArea);
    fade *= saturate(localCoord.z / fadeArea);
    fade *= saturate( (1.0 - localCoord.z) / fadeArea);



    ivec3 localCoordInGrid = ivec3(localCoord * giData.resolution);
    specularColor = vec4(0);


    vec3 resultSum = vec3(0);

    #if GI_QUALITY_LEVEL == 4

    vec4 summedUp = vec4(0);

    for (int i = 0; i < 4; i++) {
        vec3 offs = poisson3D_32[i*8];
        // offs *= sign(dot(offs, normal));
        offs = normalize(offs + 0.5*normal);
        summedUp += getVoxelInfluence(localCoord + offs / giData.resolution, normal);
    }
    summedUp /= max(0.1, summedUp.w);
    // summedUp /= 4;
    resultSum.xyz = summedUp.xyz;

    // Voxel ao
    float aoSum = 0.0;
    float aoRadius = 2.0;
    for (int i = 0; i < 32; i++) {
        vec3 offs = normalize(poisson3D_32[i]);
        // offs *= sign(dot(offs, normal));
        aoSum += getVoxelSolidness(localCoord + offs / giData.resolution * aoRadius);
    }


    aoSum /= 32.0;
    // aoSum = 1.0 - saturate(aoSum);
    // aoSum *= 3000.0;

    resultSum.xyz *= aoSum;



    #else
    resultSum.xyz = getVoxelInfluence(localCoord, normal).xyz;
    #endif



    // resultSum = v.posX + v.negX + v.posY + v.negY + v.posZ + v.negZ;
    // resultSum = v.posZ * 1.0;
    // resultSum *= 0.0002;

    float ambientFactor = 1.0;


    // Scale GI intensity based on the voxel grid size
    // - Also scale ambient to reduce artifacts

    #if GI_QUALITY_LEVEL == 0 // LOW
        resultSum *= 0.5;
        ambientFactor = 450.0;
    #elif GI_QUALITY_LEVEL == 1 // MEDIUM
        resultSum *= 0.07;
        ambientFactor = 100.0;
    #elif GI_QUALITY_LEVEL == 2 // HIGH
        resultSum *= 0.0003;
        ambientFactor *= 2.0;
    #elif GI_QUALITY_LEVEL == 3 // ULTRA
        resultSum *= 0.0001;
        ambientFactor *= 1.0;
    #endif

    resultSum *= 2.0;
    // resultSum = resultSum.yyy;

    // SRGB
    resultSum += vec3(0.017, 0.019, 0.02) * 0.01 * ambientFactor;
    resultSum = pow(resultSum, vec3(1.0 / 2.2));


    // if (any(lessThan(localCoordOffs, vec3(0.05) ))) {
    //     resultSum = mix(resultSum, vec3(1, 0, 0), 0.05);
    // }


    // Trace specular
    #if 0
    const int numSpecularSteps = 16;
    vec3 startCoord = localReflCoord;
    vec3 reflectedVec = reflect(-viewVector, normal);
    vec3 endCoord = startCoord + normalize(reflectedVec) * 0.4;
    vec3 coordStep = (endCoord - startCoord) / float(numSpecularSteps);
    vec3 specularIntersection = vec3(0);
    float accum = 0.0;

    for (int i = 0; i < numSpecularSteps; i++) {

        float solidness = step(0.5, textureLod(giVoxelData4, startCoord, 0).w);
        float impact = solidness * saturate(1.0 - accum);
        specularIntersection += impact * startCoord;
        accum += impact;
        startCoord += coordStep;
        // coordStep *= 1.1;
    }

    if (specularIntersection.x >= 0.01) {
        specularIntersection -= reflectedVec / giData.resolution * 0.5;
        Voxel refV = fetchVoxel(specularIntersection, 0);
        vec3 reflColor = (refV.posX+refV.negX + refV.posY+ refV.negY +refV.posZ+refV.negZ) * 0.001;
        reflColor += vec3(0.017, 0.019, 0.02) * 1.0;
        specularColor.xyz = pow(reflColor, vec3(1.0 / 1.6));
        specularColor.w = 1.0;
    }

    #endif
    


    return vec4(mix(offColor.xyz, resultSum, fade), 1);

}
