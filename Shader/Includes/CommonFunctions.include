#pragma once

// GLSL really needs this as a builtin!
#define saturate(v) clamp(v, 0, 1)

#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))

#define max4(a, b, c, d) max(a, max(b, max(c, d)))
#define min4(a, b, c, d) min(a, min(b, max(c, d)))

#define max5(a, b, c, d, e) max(a, max(b, max(c, max(d, e))))
#define min5(a, b, c, d, e) min(a, min(b, max(c, max(d, e))))


// Constructs a normal from a normal, binormal and tangent
vec3 mergeNormal(inout vec3 detailNormal, float detailFactor, vec3 normal, vec3 tangent, vec3 binormal) {
    detailNormal = mix(vec3(0,0,1), detailNormal, detailFactor);

    // Seperate normalization
    vec3 normalizedDetailNormal = normalize(detailNormal);
    return normalize(
        (tangent * normalizedDetailNormal.x) + 
        (binormal * normalizedDetailNormal.y) + 
        (normalize(normal) * normalizedDetailNormal.z)
    );
}

// vec4 transformParabol(vec4 transformed, float near, float far) {
//     if (transformed.w < 0.0) return vec4(0,0,0,-1000);
//     float l = length(transformed.xyz);
//     transformed /= l;
//     transformed.z += 1;
//     transformed.xy /= transformed.z;   
//     transformed.z = (l - near) / (far - near);
//     transformed.w = 1;
//     return transformed;
// }


ivec3 convert_2d_to_3d(ivec2 coord, int slice_res, int slice_size) {
    return ivec3(coord % slice_res, int(coord.x / slice_res) + int(coord.y / slice_res) * slice_size);
}



vec3 getCubemapCoordinate(int faceIndex, vec2 coord) {
    vec3 baseDir = vec3(0);
    if (faceIndex == 0) baseDir = vec3(1, -coord.y, coord.x);
    else if (faceIndex == 1) baseDir = vec3(-1, -coord.y, -coord.x);
    else if (faceIndex == 2) baseDir = vec3(coord.x, 1, -coord.y);
    else if (faceIndex == 3) baseDir = vec3(coord.x, -1, coord.y);
    else if (faceIndex == 4) baseDir = vec3(coord.x, -coord.y, -1);
    else if (faceIndex == 5) baseDir = vec3(-coord.x, -coord.y, 1);
    baseDir = normalize(baseDir);
    return baseDir;
}


float getLuminance(vec3 color) {
    return dot(vec3(0.2125, 0.7154, 0.0721), color);
}



