#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Material.include"


layout(location=0) out vec4 color0;
layout(location=1) out vec4 color1;
layout(location=2) out vec4 color2;
layout(location=3) out vec4 color3;

uniform sampler2D normalQuantizationTex;

vec3 quantizizeNormal(vec3 normal)
{
    normal = normalize(normal);
    vec3 normalUnsigned = abs(normal.rgb);
    float maxComponent = max(normalUnsigned.z, max(normalUnsigned.x, normalUnsigned.y));
    vec2 cubeCoord = normalUnsigned.z<maxComponent?(normalUnsigned.y<maxComponent?normalUnsigned.yz:normalUnsigned.xz):normalUnsigned.xy;
    cubeCoord = cubeCoord.x < cubeCoord.y ? cubeCoord.yx : cubeCoord.xy;
    cubeCoord.y /= cubeCoord.x;
    normal /= maxComponent;

    // look-up fitting length and scale the normal to get the best fit
    float fittingScale = texture(normalQuantizationTex, cubeCoord).x;

    // scale the normal to get the best fit
    normal *= max(1.0 / 128.0, min(1.0, fittingScale));
    normal = normal * 0.5 + 0.5;
    return normal;
}



void renderMaterial(Material m) {
    vec3 normal = quantizizeNormal(m.normal);
    vec3 color = m.baseColor.rgb;

    #if !defined(DO_NOT_COMPUTE_VELOCITY)
    
    // Compute velocity
    vec4 lastProj = vOutput.lastProjectedPos;

    // Usually it would be lastProj.xy / lastProj.w * 0.5 + 0.5
    // But the vertex shader already does the * 0.5
    vec2 lastTexcoord = lastProj.xy / lastProj.w + 0.5;
    vec2 fragCoord = (ivec2(gl_FragCoord.xy) + 0.5) / vec2(WINDOW_WIDTH, WINDOW_HEIGHT);
    vec2 velocity = (lastTexcoord - fragCoord);

    #else
    vec2 velocity = vec2(0);
    #endif


    // Saturate
    m.roughness = saturate(m.roughness);
    m.metallic = saturate(m.metallic);
    m.specular = saturate(m.specular);

    m.diffuseAAFactor = (max(length(m.diffuseAAFactor), 0.95) - 0.95) / 0.05;

    // Output
    color0 = vec4(normal.x, normal.y, normal.z, m.translucency);
    color1 = vec4(velocity.x, velocity.y, m.specular, m.metallic);
    color2 = vec4(color.x, color.y, color.z, m.roughness);
    color3 = vec4(m.diffuseAAFactor, 0, 0, 0);



}
