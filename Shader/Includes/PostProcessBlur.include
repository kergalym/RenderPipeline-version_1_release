#pragma once


/*

TODO:

Make one big function which combines the features of all this function and can
be configured with the parameters.


*/


#pragma include "Includes/Configuration.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/PositionReconstruction.include"

const float sslrNormalsDiscardThreshold = 0.99;
const float normalsDiscardThresholdShadows = 0.99;
const float sslrMaxDistanceBlur = 0.5;

vec4 edgePreservingShadowBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D normalTex, sampler2D depthTex, bool isSecondary) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return texture(sourceTex, texcoord);
    #endif

    // Compute the coordinates, coord is the full-res coordinate, sourceCood
    // is the coordinate to sample the input, and baseCoord is the full-res
    // coordinate used for the input.
    ivec2 coord = ivec2(gl_FragCoord.xy);
    ivec2 sourceCoord = ivec2(coord) / 2;
    ivec2 baseCoord = sourceCoord * 2;
    ivec2 pixelStep = ivec2(2);

    if (isSecondary) {
        sourceCoord = coord;
        baseCoord = coord;
        pixelStep = ivec2(1);
    }

    // Extract the data of the current pixel we are shading
    vec3 pixelNormal = unpackGBufferNormal(texelFetch(normalTex, coord, 0).xyz);
    // vec4 pixelBaseColor = texture(sourceTex, texcoord);
    vec4 pixelBaseColor = texelFetch(sourceTex, sourceCoord, 0);
    float pixelDepth = texelFetch(depthTex, coord, 0).x;

    // Weights from (very handy tool):
    // http://dev.theomader.com/gaussian-kernel-calculator/
    // Sigma = 2.0, Kernel Size = 11
    const int numBlurSteps = 5;
    const int sideSteps = (numBlurSteps - 1) / 2;
    float blurWeights[numBlurSteps] = float[numBlurSteps]
    (
        0.06136, 0.24477, 0.38774, 0.24477, 0.06136
        // 0.27901, 0.44198, 0.27901
    );

    // Perform the blur. We could use texel gather here.
    // But it is already quite performant.
    vec4 sampledResult = vec4(0.0);
    float sampleWeights = 0.0;
    for (int i = -sideSteps; i <= sideSteps; i++) {
        for(int j = -sideSteps; j <= sideSteps; j++) {
        // Compute the lookup coords
        ivec2 sampleCoord = baseCoord + ivec2(j, i) * pixelStep;
        ivec2 sampleCoordHalf = sourceCoord + ivec2(j,i);

        // Fetch the sample normal, depth and color
        vec3 sampleNormal = unpackGBufferNormal(texelFetch(normalTex, sampleCoord, 0).xyz);
        float sampleDepth = texelFetch(depthTex, sampleCoord, 0).x;
        vec4 sampleColor = texelFetch(sourceTex, sampleCoordHalf, 0);            

        // Get the pixel weight and compute its influence
        float weight = blurWeights[i + sideSteps] * blurWeights[j + sideSteps];
        float pixelImpact = step(normalsDiscardThresholdShadows, dot(pixelNormal, sampleNormal)) * weight;
        // pixelImpact *= 1.0 - saturate( abs(pixelDepth - sampleDepth) * 5.0 );
        pixelImpact = 1.0;
        pixelImpact = saturate(pixelImpact);
        sampledResult += sampleColor*pixelImpact;
        sampleWeights += pixelImpact;   
        }
    }

    // Make sure no pixel gets black because there are not enough samples
    sampledResult /= max(0.01, sampleWeights);

    // Fill the missing weights up - better have a blurred pixel then no pixel
    sampledResult += pixelBaseColor * saturate(0.3 - sampleWeights);

    return sampledResult;

}





const float normalsDiscardThreshold = 0.99;
const float occlusionMaxDistanceBlur = 0.1;

vec4 edgePreservingOcclusionBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D normalTex, sampler2D depthTex) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return texture(sourceTex, texcoord);
    #endif

    #if defined(USE_LOW_QUALITY_BLUR)
        const int numBlurSteps = 5;
    #else
        const int numBlurSteps = 17;
    #endif
    const int sideSteps = (numBlurSteps - 1) / 2;

    // http://dev.theomader.com/gaussian-kernel-calculator/
    float blurWeights[numBlurSteps] = float[numBlurSteps]
    (
        #if defined(USE_LOW_QUALITY_BLUR)
            0.06136, 0.24477, 0.38774, 0.24477, 0.06136
        #else
            0.003924,
            0.008962,
            0.018331,
            0.033585,
            0.055119,
            0.081029,
            0.106701,
            0.125858,
            0.132980,
            0.125858,
            0.106701,
            0.081029,
            0.055119,
            0.033585,
            0.018331,
            0.008962,
            0.003924
        #endif
    );

    ivec2 sourceCoord = screenCoord * 2;
    vec3 pixelNormal = unpackGBufferNormal(texelFetch(normalTex, sourceCoord, 0).xyz);
    float pixelDepth = getLinearZFromZ(texelFetch(depthTex, sourceCoord, 0).x);

    vec4 sampledResult = vec4(0.0);
    float sampleWeights = 0.0;

    for (int i = -sideSteps; i <= sideSteps; i++) {
        float weight = blurWeights[i+sideSteps];
        ivec2 sampleCoord = screenCoord + i * blurDirection;
        vec4 sampleOcclusion = texelFetch(sourceTex, sampleCoord, 0);
        vec3 sampleNormal = unpackGBufferNormal(texelFetch(normalTex, sampleCoord*2, 0).xyz);
        float sampleDepth = getLinearZFromZ(texelFetch(depthTex, sampleCoord*2, 0).x);

        float normalInfluenceFactor = step(normalsDiscardThreshold, dot(sampleNormal, pixelNormal));
        float distanceInfluenceFactor = saturate(occlusionMaxDistanceBlur / distance(pixelDepth, sampleDepth) );
        float pixelFactor = weight * normalInfluenceFactor * distanceInfluenceFactor;
        sampledResult += sampleOcclusion*pixelFactor;
        sampleWeights += pixelFactor;   
    }

    return sampledResult / max(0.1, sampleWeights);
}



vec4 edgePreservingSSLRBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D normalTex) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return texture(sourceTex, texcoord);
    #endif

    const int numBlurSteps = 17;
    const int sideSteps = (numBlurSteps - 1) / 2;

    // http://dev.theomader.com/gaussian-kernel-calculator/
    float blurWeights[numBlurSteps] = float[numBlurSteps]
    (
        0.003924,
        0.008962,
        0.018331,
        0.033585,
        0.055119,
        0.081029,
        0.106701,
        0.125858,
        0.132980,
        0.125858,
        0.106701,
        0.081029,
        0.055119,
        0.033585,
        0.018331,
        0.008962,
        0.003924
        // 0.06136, 0.24477, 0.38774, 0.24477, 0.06136
    );

    vec3 pixelNormal = unpackGBufferNormal(texture(normalTex, texcoord).xyz);
    // vec3 pixelPosition = texture(positionTex, texcoord).xyz;
    vec2 texelSize = 1.0 / vec2(textureSize(sourceTex, 0));


    vec4 sampledResult = vec4(0.0);
    float sampleWeights = 0.0;

    for (int i = -sideSteps; i <= sideSteps; i++) {
        float weight = blurWeights[i+sideSteps];
        vec2 sampleCoord = texcoord + i * blurDirection * texelSize * 0.75;
        vec3 sampleNormal = unpackGBufferNormal(texture(normalTex, sampleCoord).xyz);
        vec4 sampleOcclusion = texture(sourceTex, sampleCoord);
        // vec3 samplePosition = texture(positionTex, sampleCoord).xyz;

        float normalInfluenceFactor = step(sslrNormalsDiscardThreshold, dot(sampleNormal, pixelNormal));
        // float distanceInfluenceFactor = saturate(sslrMaxDistanceBlur / distance(samplePosition, pixelPosition) );
        float distanceInfluenceFactor = 1.0;
        float pixelFactor = weight * normalInfluenceFactor * distanceInfluenceFactor;
        // pixelFactor = weight;
        sampledResult += sampleOcclusion*pixelFactor;
        sampleWeights += pixelFactor;   
    }

    return sampledResult / max(0.1, sampleWeights);
}



vec4 cloudBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D positionTex) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return texture(sourceTex, texcoord);
    #endif

    const int numBlurSteps = 17;
    const int sideSteps = (numBlurSteps - 1) / 2;

    // http://dev.theomader.com/gaussian-kernel-calculator/
    float blurWeights[numBlurSteps] = float[numBlurSteps]
    (
        0.003924,
        0.008962,
        0.018331,
        0.033585,
        0.055119,
        0.081029,
        0.106701,
        0.125858,
        0.132980,
        0.125858,
        0.106701,
        0.081029,
        0.055119,
        0.033585,
        0.018331,
        0.008962,
        0.003924
        // 0.06136, 0.24477, 0.38774, 0.24477, 0.06136
    );

    vec2 texelSize = 1.0 / vec2(WINDOW_WIDTH, WINDOW_HEIGHT);
    vec4 sampledResult = vec4(0.0);
    vec3 pixelPos = texture(positionTex, texcoord).xyz;
    float sampleWeights = 0.0;


    for (int i = -sideSteps; i <= sideSteps; i++) {
        float weight = blurWeights[i+sideSteps];
        vec2 sampleCoord = texcoord + i * blurDirection * texelSize * 0.25;
        vec3 samplePos = texture(positionTex, sampleCoord).xyz;
        float sampleWeight = weight;

        sampleWeights += sampleWeight;
        sampledResult += texture(sourceTex, sampleCoord) * sampleWeight;
    }

    return sampledResult / max(0.1, sampleWeights);
}


vec4 bloomBlur(vec2 texcoord, sampler2D sourceTex) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return textureLod(sourceTex, texcoord, 0);
    #endif

    vec2 pixelStep = (1.0 / textureSize(sourceTex, 0).xy) * blurDirection;
    // vec2 pixelStep = (1.0 / vec2(480, 270)) * blurDirection;

    const int numOffsets = 7;
    float blurWeights[numOffsets] = float[numOffsets] ( 
        0.159723, 0.141887, 0.107635, 0.069724, 0.038569, 0.018219, 0.004571
    );

    float blurOffsets[numOffsets] = float[numOffsets] ( 
        0.495019502514, 2.47510342738, 4.45527012589, 6.43557455109, 8.41608545723, 10.3968384653, 12.0
    );
    vec4 sampledResult = vec4(0.0);

    for (int i = 0; i < numOffsets; i++) {
        sampledResult += textureLod(sourceTex, texcoord + pixelStep * blurOffsets[i], 0) * blurWeights[i];
        sampledResult += textureLod(sourceTex, texcoord - pixelStep * blurOffsets[i], 0) * blurWeights[i];
    }

    return sampledResult;
}


float evaluateDofInfluence(float pixelCoC, float sampleCoC) {
    return abs(pixelCoC-sampleCoC) < 0.1 ? 1.0 : 0.0; 
}

vec4 dofBlur(vec2 texcoord, sampler2D sourceTex, float CoC) {

    #if defined(DEBUG_DISABLE_UPSCALE_BLUR)
        return textureLod(sourceTex, texcoord, 0);
    #endif

    vec2 pixelStep = (1.0 / textureSize(sourceTex, 0).xy) * blurDirection * saturate(2.0 * CoC);
    // vec2 pixelStep = (1.0 / vec2(480, 270)) * blurDirection;

    const int numOffsets = 8;
    // http://dev.theomader.com/gaussian-kernel-calculator/
    float blurWeights[numOffsets] = float[numOffsets]
    (
        0.125858,
        0.106701,
        0.081029,
        0.055119,
        0.033585,
        0.018331,
        0.008962,
        0.003924
    );

    float initialWeight = 0.132980;
    vec4 sampledResult = textureLod(sourceTex, texcoord, 0)*initialWeight;
    float sampleWeights = initialWeight;



    for (int i = 0; i < numOffsets; i++) {
        vec4 sample1 = textureLod(sourceTex, texcoord + pixelStep * (i+1), 0);
        vec4 sample2 = textureLod(sourceTex, texcoord - pixelStep * (i+1), 0);
        float influence1 = evaluateDofInfluence(CoC, sample1.w) * blurWeights[i];
        float influence2 = evaluateDofInfluence(CoC, sample2.w) * blurWeights[i];
        sampleWeights += influence1 + influence2;
        sampledResult += influence1 * sample1 + influence2 * sample2;


    }

    return sampledResult / max(0.1, sampleWeights);
}
