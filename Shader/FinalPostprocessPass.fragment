#version 400

#pragma optionNV (unroll all)
#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ChromaticAberration.include"
#pragma include "Includes/ColorCorrection.include"
#pragma include "Includes/FilmGrain.include"
#pragma include "Includes/PoissonDisk.include"
#pragma include "Includes/Sharpen.include"


in vec2 texcoord;
uniform sampler2D colorTex;
uniform sampler2D colorLUT;

out vec4 result;

uniform float osg_FrameTime;

uniform sampler2D velocityTex;

void main() {
    #if !defined(DEBUG_DISABLE_COLOR_CORRECTION) && !defined(DEBUG_VISUALIZATION_ACTIVE) && defined(USE_COLOR_CORRECTION)
                    
        // Sharpen
        result.xyz = sharpenTexture(colorTex, texcoord, 0.5);

        // Chromatic aberration
        // result.xyz = applyChromaticAberration(colorTex, texcoord, result.xyz, 1.0);

        // Color LUT
        result.xyz = applyColorLUT(colorLUT, result.xyz);

        // Film grain
        result.xyz = computeGrain(result.xyz, texcoord, mod(osg_FrameTime, 1.0) + 1.0);

    #else
        result.xyz =  textureLod(colorTex, texcoord, 0).xyz;
    #endif

    // Vignette
    #if !defined(DEBUG_VISUALIZATION_ACTIVE)
        result.xyz *= 1.0 - smoothstep(0, 1, 
            (length( (texcoord - vec2(0.5, 0.5)) * vec2(1.3, 1.0) * 1.1  ) - 0.2) ) * 0.8;
        result.w = 1.0;
    #endif


    #if defined(DEBUG_RM_VELOCITY)
        vec2 velocity = textureLod(velocityTex, texcoord, 0).xy;
        result.xy = (velocity) * 5.0;
        result.zw = vec2(0, 1);
    #endif

}
