#pragma once



// https://gist.github.com/fisch0920/6770346

// number of directions to sample in UV space
#define HBAO_NUM_SAMPLE_DIRECTIONS (2*OCCLUSION_SAMPLES)
#define HBAO_TANGENT_BIAS 0.4
#define HBAO_NUM_SAMPLING_STEPS 3
#define HBAO_SAMPLING_STEP (1.0 * OCCLUSION_RADIUS)

#define HBAO_SCALE (5.6 * OCCLUSION_STRENGTH)
#define HBAO_SAMPLING_RADIUS (0.8 * OCCLUSION_RADIUS)


uniform sampler2D depthTex;
uniform sampler2D noiseTex;

uniform vec3 cameraPosition;

const float TWO_PI = 2.0 * M_PI;

vec3 hbao_getPositionVS(vec2 uv) {
  float d = textureLod(depthTex, uv, 0).x;
  return calculateViewPos(d, uv);
}

float computeOcclusion(vec2 coord, ivec2 coordInt, float distanceToCamera) {

  vec3 viewPos = hbao_getPositionVS(coord);
  
  // Compute normal based on depth buffer
  vec3 viewPosX1 = hbao_getPositionVS(coord + vec2(1.0 / WINDOW_WIDTH, 0));
  vec3 viewPosY1 = hbao_getPositionVS(coord + vec2(0, 1.0 / WINDOW_HEIGHT));

  // vec3 normalVS = texture(viewSpaceNormals, coord).xyz;
  vec3 viewNorm = normalize(cross(viewPos - viewPosX1, viewPos - viewPosY1));

  float total = 0.0f;
  float sample_direction_increment = TWO_PI / HBAO_NUM_SAMPLE_DIRECTIONS;
 
  #if defined(USE_TEMPORAL_OCCLUSION)
    float frame_angle_offset = 0.2 * (frameIndex %2);
  #else
    float frame_angle_offset = 0.0;
  #endif  

  #if defined(USE_OCCLUSION_NOISE)
    float noise = texelFetch(noiseTex, ivec2(gl_FragCoord) % 4, 0).x;
  #else
    float noise = 0.0; 
  #endif

  // frame_angle_offset *= 0;

  float pixelDepth = texture(depthTex, coord).x;
  float dist = getLinearZFromZ(pixelDepth);
  vec2 pixelFactor = 1.0 / vec2(WINDOW_WIDTH, WINDOW_HEIGHT);

  // Scale the kernel size a bit to make it look more realistic, however clamp
  // it to avoid huge kernel sizes (which destroy the texture cache)
  // pixelFactor *= clamp(20.0 / dist, 0.02, 3.0);


  for(uint i = 0; i < HBAO_NUM_SAMPLE_DIRECTIONS; i++)
  {

    float sampling_angle = (i + frame_angle_offset) * sample_direction_increment;
    vec2 sampleDir = vec2(cos(sampling_angle), sin(sampling_angle));

    // we will now march along sampleDir and calculate the horizon
    // horizon starts with the tangent plane to the surface, whose angle we can get from the normal
    float tangentAngle = acos(dot(vec3(sampleDir, 0), viewNorm)) - (0.5 * M_PI) + HBAO_TANGENT_BIAS;
    float horizonAngle = tangentAngle;
    vec3 lastDiff = vec3(0);
 
    for (uint j = 0; j < HBAO_NUM_SAMPLING_STEPS; j++)
    {
      // march along the sampling direction and see what the horizon is
      vec2 sampleOffset = float(j+1 + noise) * HBAO_SAMPLING_STEP * sampleDir * pixelFactor;
      vec2 offTex = coord + sampleOffset;

      // Fix issues at screen border
      if (any(greaterThan(offTex, vec2(1))) || any(lessThan(offTex, vec2(0)))) {
        continue;
      }

      // Compute view pos from depth, faster for small kernels
      vec3 sampleViewPos = hbao_getPositionVS(offTex);

      // we now have the view space position of the offset point
      vec3 diff = sampleViewPos - viewPos;
      if (length(diff) < HBAO_SAMPLING_RADIUS)
      {
        // skip samples which are outside of our local sampling radius
        lastDiff = diff;
        float elevationAngle = atan(diff.z / length(diff.xy));
        horizonAngle = max(horizonAngle, elevationAngle);
      }
    } 
 
    // float normDiff = length(lastDiff) / HBAO_SAMPLING_RADIUS;
    // float attenuation = 1 - normDiff*normDiff;
    float attenuation = 1.0 / (1 + length(lastDiff));
    // now compare horizon angle to tangent angle to get ambient occlusion
    float occlusion = clamp(attenuation * (sin(horizonAngle) - sin(tangentAngle)), 0.0, 1.0);
    total += HBAO_SCALE*occlusion;
  } // sampling directions
 
  total /= HBAO_NUM_SAMPLE_DIRECTIONS;
  // total = pow(total, 0.5);
  total = clamp(total, 0.0, 1.0);
  return total;

}